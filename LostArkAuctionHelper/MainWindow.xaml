<Window x:Class="LostArkAuctionHelper.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LostArkAuctionHelper"
        xmlns:helpers="clr-namespace:LostArkAuctionHelper.Helpers"
        mc:Ignorable="d"
        Title="Lost Ark Utility Tool"
        FontFamily="Resources/#M Ying Hei PRC W48 W3"
        FontSize="30"
        WindowStyle="None"
        Background="Transparent"
        AllowsTransparency="True"
        ResizeMode="NoResize"
        SizeToContent="WidthAndHeight"
        FocusManager.FocusedElement="{Binding ElementName=PriceTextBox}">
  <Window.Resources>
    <ResourceDictionary>
      <SolidColorBrush x:Key="DarkPurpleBrush" Color="#312C51"/>
      <SolidColorBrush x:Key="LightPurpleBrush" Color="#48426D"/>
      <SolidColorBrush x:Key="GoldBrush" Color="#F0C38E"/>
      <SolidColorBrush x:Key="SkinBrush" Color="#F1AA9B"/>

      <helpers:PartyOptionBackgroundConverter x:Key="PartyOptionBackgroundConverterButton" ActiveColor="{StaticResource GoldBrush}" InactiveColor="{StaticResource LightPurpleBrush}"/>
      <helpers:PartyOptionBackgroundConverter x:Key="PartyOptionBackgroundConverterTextbox" ActiveColor="{StaticResource GoldBrush}" InactiveColor="{StaticResource DarkPurpleBrush}"/>
      <helpers:PartyOptionToForegroundConverter x:Key="PartyOptionToForegroundConverter"/>
      <helpers:PartyOptionToBorderThicknessConverter x:Key="PartyOptionToBorderThicknessConverterHide" ActiveValue="0" InactiveValue="2"/>

      <Style x:Key="DefaultTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource DarkPurpleBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource GoldBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Margin" Value="0 0 5 0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SelectionBrush" Value="{StaticResource LightPurpleBrush}"/>
        <Setter Property="SelectionOpacity" Value="0.5"/>
      </Style>

      <Style x:Key="CloseButton" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource GoldBrush}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{StaticResource GoldBrush}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FontWeight" Value="ExtraBold"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0 3 3 0"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="Button">
              <Border CornerRadius="5" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}">
                <Grid>
                  <Line X1="5.5" Y1="5.5" X2="20.5" Y2="20.5" 
                                          Stroke="{TemplateBinding Foreground}" StrokeThickness="2"
                                          StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>
                  <Line X1="5.5" Y1="20.5" X2="20.5" Y2="5.5" 
                                          Stroke="{TemplateBinding Foreground}" StrokeThickness="2"
                                          StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>
                </Grid>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{StaticResource DarkPurpleBrush}"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type CheckBox}">
              <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">
                <Border BorderBrush="{TemplateBinding BorderBrush}"
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Width="15" Height="15">
                  <Path Stretch="Uniform"
                        Width="15" Height="10" 
                        Fill="{StaticResource GoldBrush}"
                        Name="eliCheck"
                        Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " 
                        Visibility="Collapsed"/>
                </Border>
                <TextBlock Margin="5 0 0 0"
                           VerticalAlignment="Center"
                           Foreground="{TemplateBinding Foreground}"
                           Text="{TemplateBinding Content}"/>
              </StackPanel>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                  <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                  <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                  <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                  <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                  <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                  <Setter TargetName="eliCheck" Property="Visibility" Value="Visible"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="PartySizeButton" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="{StaticResource GoldBrush}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Background" Value="Yellow"/>
        <Setter Property="Margin" Value="2 7 2 7"/>
        <Setter Property="Foreground" Value="{StaticResource GoldBrush}"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"
                                    CornerRadius="7">
                <ContentPresenter Content="{TemplateBinding Content}"
                                                  VerticalAlignment="Center" HorizontalAlignment="Center"/>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="PartySizeTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBoxStyle}">
        <Setter Property="Margin" Value="2 7 2 7"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TextBox}">
              <Border x:Name="Border" 
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"
                                    CornerRadius="7"
                                    SnapsToDevicePixels="True">
                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                  <Setter Property="BorderBrush" TargetName="Border" Value="{StaticResource GoldBrush}"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                  <Setter Property="BorderBrush" TargetName="Border" Value="{StaticResource GoldBrush}"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="BiasButton" TargetType="{x:Type Button}" BasedOn="{StaticResource PartySizeButton}">
        <Setter Property="Margin" Value="1"/>
        <Setter Property="FontSize" Value="20"/>
      </Style>

      <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Expander}">
              <DockPanel>
                <ToggleButton x:Name="HeaderSite"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              DockPanel.Dock="Top"
                              Content="{TemplateBinding Header}"
                              FontStretch="{TemplateBinding FontStretch}"
                              Foreground="{TemplateBinding Foreground}" Background="Transparent"
                              FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}"
                              FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}"
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Margin="1" Padding="{TemplateBinding Padding}"
                              MinWidth="0" MinHeight="0"
                              Cursor="Hand">
                  <ToggleButton.Template>
                    <ControlTemplate TargetType="ToggleButton">
                      <ControlTemplate.Resources>

                        <Storyboard x:Key="OnChecking">
                          <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                   Storyboard.TargetName="Arrow"
                                   From="-90" To="0"
                                   Duration="0:0:0.15" BeginTime="0:0:0"/>
                        </Storyboard>

                        <Storyboard x:Key="OnUnchecking">
                          <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                   Storyboard.TargetName="Arrow"
                                   From="0" To="-90"
                                   Duration="0:0:0.15" BeginTime="0:0:0"/>
                        </Storyboard>

                      </ControlTemplate.Resources>

                      <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                          <Trigger.EnterActions>
                            <BeginStoryboard Storyboard="{StaticResource OnChecking}"/>
                          </Trigger.EnterActions>
                          <Trigger.ExitActions>
                            <BeginStoryboard Storyboard="{StaticResource OnUnchecking}"/>
                          </Trigger.ExitActions>
                        </Trigger>
                      </ControlTemplate.Triggers>

                      <StackPanel Orientation="Horizontal">
                        <Border Background="Transparent"
                                BorderBrush="{StaticResource GoldBrush}" BorderThickness="1.5"
                                Width="20" Height="20"
                                Margin="3"
                                CornerRadius="20">
                          <Border.RenderTransform>
                            <ScaleTransform ScaleX="2" ScaleY="2"/>
                          </Border.RenderTransform>
                          <Path x:Name="Arrow"
                                Data="M 4.5,7.5 L 8.5,11 L 12.5,7.5"
                                Stroke="{StaticResource GoldBrush}" StrokeThickness="1.5">
                            <Path.RenderTransform>
                              <RotateTransform Angle="-90" CenterX="8" CenterY="8.5"/>
                            </Path.RenderTransform>
                          </Path>
                        </Border>
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          VerticalAlignment="Center" HorizontalAlignment="Center"
                                          Margin="30 20 0 0"/>
                      </StackPanel>
                    </ControlTemplate>
                  </ToggleButton.Template>
                </ToggleButton>
                <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom"
                                  Focusable="False"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                  Margin="{TemplateBinding Padding}" 
                                  Visibility="Collapsed"/>
              </DockPanel>
              <ControlTemplate.Triggers>
                <Trigger Property="IsExpanded" Value="True">
                  <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

    </ResourceDictionary>
  </Window.Resources>
  
  <Border Background="{StaticResource LightPurpleBrush}" CornerRadius="10">
    <Grid Background="Transparent"
          MouseLeftButtonDown="Grid_MouseDown">

      <Grid.RowDefinitions>
        <RowDefinition Height="40" />
        <RowDefinition />
      </Grid.RowDefinitions>
      
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="500"/>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>

      <!-- Header -->
      <Grid Grid.ColumnSpan="3">

        <StackPanel Orientation="Horizontal"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center">
          <Label Content="Lost Ark Utility Tool"
                 FontSize="20"
                 FontFamily="Resources/#M Ying Hei PRC W48 W5"
                 Margin="0 5 0 0"
                 HorizontalAlignment="Center"
                 VerticalAlignment="Center"
                 Foreground="{StaticResource GoldBrush}"/>
        </StackPanel>

        <StackPanel Orientation="Horizontal" 
                    HorizontalAlignment="Right" 
                    VerticalAlignment="Center">
          <Button Style="{StaticResource CloseButton}"
                  Click="Button_Click"/>
        </StackPanel>

      </Grid>
      
      <!-- Auction calculator -->
      <Grid Grid.Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="4*"/>
          <ColumnDefinition Width="7*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="65"/>
          <RowDefinition Height="65"/>
          <RowDefinition Height="65"/>
          <RowDefinition Height="65"/>
          <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Column="0"
                        VerticalAlignment="Center" HorizontalAlignment="Right" 
                        Orientation="Horizontal">
          <Button BorderThickness="0" 
                        Background="{StaticResource GoldBrush}"
                        Foreground="{StaticResource DarkPurpleBrush}"
                        Content="i"
                        FontSize="20"
                        IsEnabled="False"
                        Width="25" Height="25"
                        ToolTipService.InitialShowDelay="0"
                        ToolTipService.ShowOnDisabled="True">
            <Button.ToolTip>
              <TextBlock>
              <Run Text="Bias" FontWeight="Bold"/>
              <LineBreak/>
              <Run Text="Bias is used to offset the equal share price in your favor."/>
              <LineBreak/>
              <Run Text="0 bias is equal share, so if you want that check the box. If the box is ticked the selected bias value doesn't matter."/>
              <LineBreak/>
              <Run Text="100 is the exact bid before the equal share price, so if someone bids on that you will end up gaining the same amount."/>
              <LineBreak/>
              <Run Text="The default is 75."/>
              </TextBlock>
            </Button.ToolTip>
            <Button.Template>
              <ControlTemplate TargetType="Button">
                <Border Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      CornerRadius="20">
                  <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Border>
              </ControlTemplate>
            </Button.Template>
          </Button>
          <Label Content="Bias"
               HorizontalAlignment="Right"
               VerticalAlignment="Center"
               Foreground="{StaticResource GoldBrush}"/>

        </StackPanel>
        <StackPanel Grid.Column="1"
                        Orientation="Horizontal">
          <Grid Grid.Column="1" Grid.Row="2"
                      Width="100">
            <Grid.ColumnDefinitions>
              <ColumnDefinition />
              <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition />
            </Grid.RowDefinitions>

            <Button Style="{StaticResource BiasButton}"
                            Content="100"
                            Command="{Binding BiasCommand}" CommandParameter="100"
                            BorderThickness="{Binding Bias, Converter={StaticResource PartyOptionToBorderThicknessConverterHide}, ConverterParameter=100}"
                            Background="{Binding Bias, Converter={StaticResource PartyOptionBackgroundConverterButton}, ConverterParameter=100}"
                            Foreground="{Binding Bias, Converter={StaticResource PartyOptionToForegroundConverter}, ConverterParameter=100}"/>
            <Button Grid.Column="1"
                            Style="{StaticResource BiasButton}"
                            Content="75"
                            Command="{Binding BiasCommand}" CommandParameter="75"
                            BorderThickness="{Binding Bias, Converter={StaticResource PartyOptionToBorderThicknessConverterHide}, ConverterParameter=75}"
                            Background="{Binding Bias, Converter={StaticResource PartyOptionBackgroundConverterButton}, ConverterParameter=75}"
                            Foreground="{Binding Bias, Converter={StaticResource PartyOptionToForegroundConverter}, ConverterParameter=75}"/>
            <Button Grid.Row="1"
                            Style="{StaticResource BiasButton}"
                            Content="50"
                            Command="{Binding BiasCommand}" CommandParameter="50"
                            BorderThickness="{Binding Bias, Converter={StaticResource PartyOptionToBorderThicknessConverterHide}, ConverterParameter=50}"
                            Background="{Binding Bias, Converter={StaticResource PartyOptionBackgroundConverterButton}, ConverterParameter=50}"
                            Foreground="{Binding Bias, Converter={StaticResource PartyOptionToForegroundConverter}, ConverterParameter=50}"/>
            <Button Grid.Row="1" Grid.Column="1"
                            Style="{StaticResource BiasButton}" 
                            Content="25"
                            Command="{Binding BiasCommand}" CommandParameter="25"
                            BorderThickness="{Binding Bias, Converter={StaticResource PartyOptionToBorderThicknessConverterHide}, ConverterParameter=25}"
                            Background="{Binding Bias, Converter={StaticResource PartyOptionBackgroundConverterButton}, ConverterParameter=25}"
                            Foreground="{Binding Bias, Converter={StaticResource PartyOptionToForegroundConverter}, ConverterParameter=25}"/>
          </Grid>
          <Label Margin="5 0 0 0"
                   Content="Equal share" 
                   HorizontalAlignment="Right"
                   VerticalAlignment="Center"
                   Foreground="{StaticResource GoldBrush}"/>
          <CheckBox VerticalAlignment="Center"
                          Margin="5 0 0 0"
                          Background="{StaticResource DarkPurpleBrush}"
                          BorderBrush="{StaticResource GoldBrush}"
                          Style="{StaticResource CheckBoxStyle}"
                          IsChecked="{Binding IsEqualShare}"
                          TabIndex="4">
            <CheckBox.LayoutTransform>
              <ScaleTransform ScaleX="2" ScaleY="2" />
            </CheckBox.LayoutTransform>
            <CheckBox.Resources>
              <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="3"/>
              </Style>
            </CheckBox.Resources>
          </CheckBox>
        </StackPanel>

        <Label Grid.Column="0" Grid.Row="1" 
                   Content="Lowest price" 
                   HorizontalAlignment="Right"
                   VerticalAlignment="Center"
                   Foreground="{StaticResource GoldBrush}"/>
        <TextBox x:Name="PriceTextBox"
                 Grid.Column="1" Grid.Row="1"
                 Style="{StaticResource DefaultTextBoxStyle}"
                 Text="{Binding LowestPrice, UpdateSourceTrigger=PropertyChanged}"
                 KeyDown="TextBox_KeyDown"
                 GotFocus="PriceTextBox_GotFocus"
                 TabIndex="1">
          <TextBox.Resources>
            <Style TargetType="{x:Type Border}">
              <Setter Property="CornerRadius" Value="7"/>
            </Style>
          </TextBox.Resources>
        </TextBox>

        <Label Grid.Column="0" Grid.Row="2" 
                   Content="Party size" 
                   Foreground="{StaticResource GoldBrush}"
                   HorizontalAlignment="Right"
                   VerticalAlignment="Center"/>
        <Grid Grid.Column="1" Grid.Row="2">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="1*"/>
          </Grid.ColumnDefinitions>

          <Button Content="4"
                        Style="{StaticResource PartySizeButton}"
                        BorderThickness="{Binding ActivePartyOption, Converter={StaticResource PartyOptionToBorderThicknessConverterHide}, ConverterParameter=0}"
                        Background="{Binding ActivePartyOption, Converter={StaticResource PartyOptionBackgroundConverterButton}, ConverterParameter=0}"
                        Foreground="{Binding ActivePartyOption, Converter={StaticResource PartyOptionToForegroundConverter}, ConverterParameter=0}"
                        Click="Button_Click_0"/>

          <Button Grid.Column="1"
                        Content="8"
                        Style="{StaticResource PartySizeButton}"
                        BorderThickness="{Binding ActivePartyOption, Converter={StaticResource PartyOptionToBorderThicknessConverterHide}, ConverterParameter=1}"
                        Background="{Binding ActivePartyOption, Converter={StaticResource PartyOptionBackgroundConverterButton}, ConverterParameter=1}"
                        Foreground="{Binding ActivePartyOption, Converter={StaticResource PartyOptionToForegroundConverter}, ConverterParameter=1}"
                        Click="Button_Click_1"/>

          <TextBox Grid.Column="2"
                         Style="{StaticResource PartySizeTextBox}"
                         Text="{Binding PartySize, UpdateSourceTrigger=PropertyChanged}"
                         Background="{Binding ActivePartyOption, Converter={StaticResource PartyOptionBackgroundConverterTextbox}, ConverterParameter=2}"
                         Foreground="{Binding ActivePartyOption, Converter={StaticResource PartyOptionToForegroundConverter}, ConverterParameter=2}"
                         KeyDown="TextBox_KeyDown_1"
                         GotFocus="PartySizeTextBox_GotFocus"
                         TabIndex="2"/>
        </Grid>

        <Label Grid.Column="0" Grid.Row="3" 
                   Content="Best bid" 
                   Foreground="{StaticResource GoldBrush}"
                   HorizontalAlignment="Right"
                   VerticalAlignment="Center"/>
        <StackPanel Grid.Column="1" Grid.Row="3"
                        Orientation="Horizontal"
                        VerticalAlignment="Center" HorizontalAlignment="Center"
                        MouseLeftButtonDown="StackPanel_MouseLeftButtonDown"
                        ToolTip="Click the text to copy it to the clipboard"
                        ToolTipService.InitialShowDelay="200">
          <Label HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Foreground="{StaticResource GoldBrush}"
                       Content="{Binding EndPrice}"/>
          <Image Source="Resources/gold.png"
                       Height="20"/>
        </StackPanel>
      </Grid>

      <Border Grid.Column="1" Grid.Row="1"
              VerticalAlignment="Stretch"
              BorderThickness="2"
              Margin="5 5"
              CornerRadius="1"
              BorderBrush="{StaticResource GoldBrush}"/>

      <!-- SH material distribution calculator -->
      <Grid Grid.Column="2" Grid.Row="1"
            Width="720">

        <Grid.ColumnDefinitions>

          <ColumnDefinition Width="400"/>
          <ColumnDefinition Width="1*"/>
          <ColumnDefinition Width="2*"/>

        </Grid.ColumnDefinitions>
        
        <Grid.RowDefinitions>
          <RowDefinition Height="65"/>
          <RowDefinition Height="65"/>
          <RowDefinition Height="65"/>
          <RowDefinition Height="65"/>
        </Grid.RowDefinitions>

        <Grid>

          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition />
          </Grid.ColumnDefinitions>
          
          <Label Content="Craftable amount:"
                 Padding="5 0 0 0"
                 HorizontalAlignment="Left"
                 VerticalAlignment="Center"
                 Foreground="{StaticResource GoldBrush}"/>

          <Label Grid.Column="1"
                 Content="{Binding CraftableAmount}"
                 Padding="5 0 0 0"
                 HorizontalAlignment="Center"
                 VerticalAlignment="Center"
                 Foreground="{StaticResource GoldBrush}"/>

        </Grid>
        

        <Grid Grid.Row="1">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
          </Grid.ColumnDefinitions>
          <Label Content="White material" 
                 HorizontalAlignment="Right"
                 VerticalAlignment="Center"
                 Foreground="{StaticResource GoldBrush}"/>
          <TextBox Grid.Column="1"
                   Style="{StaticResource DefaultTextBoxStyle}"
                   Text="{Binding WhiteMaterialAmount, UpdateSourceTrigger=PropertyChanged}"
                   KeyDown="TextBox_KeyDown"
                   GotFocus="PriceTextBox_GotFocus"
                   TabIndex="1">
            <TextBox.Resources>
              <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="7"/>
              </Style>
            </TextBox.Resources>
          </TextBox>

        </Grid>

        <Grid Grid.Row="2">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
          </Grid.ColumnDefinitions>
          <Label Content="Green material" 
                 HorizontalAlignment="Right"
                 VerticalAlignment="Center"
                 Foreground="{StaticResource GoldBrush}"/>
          <TextBox Grid.Column="1"
                   Style="{StaticResource DefaultTextBoxStyle}"
                   Text="{Binding GreenMaterialAmount, UpdateSourceTrigger=PropertyChanged}"
                   KeyDown="TextBox_KeyDown"
                   GotFocus="PriceTextBox_GotFocus"
                   TabIndex="1">
            <TextBox.Resources>
              <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="7"/>
              </Style>
            </TextBox.Resources>
          </TextBox>

        </Grid>

        <Grid Grid.Row="3">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
          </Grid.ColumnDefinitions>
          <Label Content="Blue material" 
                 HorizontalAlignment="Right"
                 VerticalAlignment="Center"
                 Foreground="{StaticResource GoldBrush}"/>
          <TextBox Grid.Column="1"
                   Style="{StaticResource DefaultTextBoxStyle}"
                   Text="{Binding BlueMaterialAmount, UpdateSourceTrigger=PropertyChanged}"
                   KeyDown="TextBox_KeyDown"
                   GotFocus="PriceTextBox_GotFocus"
                   TabIndex="1">
            <TextBox.Resources>
              <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="7"/>
              </Style>
            </TextBox.Resources>
          </TextBox>

        </Grid>

        <Label Grid.Column="1"
               Content="Need" 
               HorizontalAlignment="Center"
               VerticalAlignment="Center"
               Foreground="{StaticResource GoldBrush}"/>

        <Label Grid.Column="1" Grid.Row="1"
               Content="{Binding WhiteMaterialNeed}" 
               HorizontalAlignment="Center"
               VerticalAlignment="Center"
               Foreground="{StaticResource GoldBrush}"/>

        <Label Grid.Column="1" Grid.Row="2"
               Content="{Binding GreenMaterialNeed}" 
               HorizontalAlignment="Center"
               VerticalAlignment="Center"
               Foreground="{StaticResource GoldBrush}"/>

        <Label Grid.Column="1" Grid.Row="3"
               Content="{Binding BlueMaterialNeed}" 
               HorizontalAlignment="Center"
               VerticalAlignment="Center"
               Foreground="{StaticResource GoldBrush}"/>
        
        <Label Grid.Column="2"
               Content="Convert"
               HorizontalAlignment="Center"
               VerticalAlignment="Center"
               Foreground="{StaticResource GoldBrush}"/>

        <Label Grid.Column="2" Grid.Row="1"
               Content="{Binding WhiteMaterialConvert}"
               MouseLeftButtonDown="WhiteMaterialConvert_MouseLeftButtonDown"
               HorizontalAlignment="Center"
               VerticalAlignment="Center"
               Foreground="{StaticResource GoldBrush}"/>

        <Label Grid.Column="2" Grid.Row="2"
               Content="{Binding GreenMaterialConvert}"
               MouseLeftButtonDown="GreenMaterialConvert_MouseLeftButtonDown"
               HorizontalAlignment="Center"
               VerticalAlignment="Center"
               Foreground="{StaticResource GoldBrush}"/>

        <Label Grid.Column="2" Grid.Row="3"
               Content="-"
               HorizontalAlignment="Center"
               VerticalAlignment="Center"
               Foreground="{StaticResource GoldBrush}"/>

      </Grid>
    </Grid>
  </Border>
</Window>